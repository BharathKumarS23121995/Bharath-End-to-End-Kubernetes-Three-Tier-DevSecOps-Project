pipeline {
    agent any

    tools {
        nodejs 'nodejs'
    }

    environment {
        SCANNER_HOME       = tool 'sonar-scanner'
        AWS_ACCOUNT_ID     = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME  = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'eu-west-1'
        REPOSITORY_URI     = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com" // no trailing slash
        IMAGE_TAG          = "${BUILD_NUMBER}"
    }

    stages {


        stage('PR Check') {
            when { expression { env.CHANGE_ID } }
            steps {
                echo "Triggered by PR #${env.CHANGE_ID} from ${env.CHANGE_BRANCH} â†’ ${env.CHANGE_TARGET}"
            }
        }

        stage('Checkout Code') {
            steps {
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            when { expression { env.CHANGE_ID } }
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh """
                            ${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectName=frontend \
                            -Dsonar.projectKey=frontend
                        """
                        }
                    }
                }
        }

        stage('Quality Check') {
            when { expression { env.CHANGE_ID } }
            steps {
                script {
                    // Wait for SonarQube analysis to complete and enforce quality gate
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to Quality Gate failure: ${qg.status}"
                    } else {
                        echo "Quality Gate passed: ${qg.status}"
                    }
                }
            }
        }

        stage('Trivy File Scan') {
            when { expression { env.CHANGE_ID } }
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        stage('Docker Build') {
            when { expression { env.CHANGE_ID } }
            steps {
                dir('Application-Code/frontend') {
                    sh 'docker system prune -f || true'
                    sh 'docker container prune -f || true'
                    sh "docker build -t ${AWS_ECR_REPO_NAME} ."
                }
            }
        }

        stage('ECR Image Push') {
            when { expression { env.CHANGE_ID } }
            steps {
                withAWS(credentials: 'aws-creds', region: "${AWS_DEFAULT_REGION}") {
                    script {
                        def repo = "${REPOSITORY_URI}".replaceAll('/+$', '') // remove trailing slash
                        sh """
                            echo "Logging in to ECR..."
                            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                                docker login --username AWS --password-stdin ${repo}

                            echo "Tagging image..."
                            docker tag ${AWS_ECR_REPO_NAME}:latest ${repo}/${AWS_ECR_REPO_NAME}:${IMAGE_TAG}

                            echo "Pushing image..."
                            docker push ${repo}/${AWS_ECR_REPO_NAME}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            when { expression { env.CHANGE_ID } }
            steps {
                script {
                    def repo = "${REPOSITORY_URI}".replaceAll('/+$', '')
                    sh "trivy image ${repo}/${AWS_ECR_REPO_NAME}:${IMAGE_TAG} > trivyimage.txt"
                }
            }
        }

        stage('Update Deployment YAML') {
            when { expression { env.CHANGE_ID } }
            environment {
                GIT_REPO_NAME = "Bharath-End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "BharathKumarS23121995"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh """
                            git config user.email "BharathKumarS23121995@gmail.com"
                            git config user.name "BharathKumarS23121995"

                            imageTag=\$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            sed -i "s/${AWS_ECR_REPO_NAME}:\${imageTag}/${AWS_ECR_REPO_NAME}:${IMAGE_TAG}/" deployment.yaml

                            git add deployment.yaml
                            git commit -m "Update deployment image to version ${IMAGE_TAG}" || echo "No changes to commit"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning workspace..."
            cleanWs()
        }
        success {
            echo "PR build completed successfully!"
        }
        failure {
            echo "PR build failed!"
        }
    }
}
